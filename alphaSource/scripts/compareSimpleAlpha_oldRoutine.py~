#!/usr/bin/python
import os, sys, math, datetime
from ROOT import gROOT, gStyle, TFile, TTree, TH1F, TH1D, TCanvas, TPad, TMath, TF1, TLegend, gPad, gDirectory
from ROOT import kRed, kBlue, kGreen, kWhite

from collections import OrderedDict
import numpy

sys.path.append(os.path.abspath(os.path.curdir))

from Plotter import parseLYAnaInputArgs
options = parseLYAnaInputArgs()

#gROOT.LoadMacro("Plotter/UMDStyle.C")
#from ROOT import SetUMDStyle
#SetUMDStyle()
#gROOT.SetBatch()

####################################################################################################
####################################################################################################
if __name__ == '__main__':
    #gROOT.SetStyle("Plain")
    #gStyle.SetOptFit()
    #gStyle.SetOptStat(0)
    print options
    myfile = {}
    mytree = {}
    myhist = {}
    myfit = {}
    valphys = {}
    valsyst = {}
    runSyst = False


    ##
    myfile["meas1"] = TFile("root/AlphaSource/Pu239new_EJ200PS-1X1P_1_Default_Nofoil_FastFrame_20160907_merged.root")

    mytree["meas1"] = myfile["meas1"].Get("tree")

    ## 12/10
    myfile["meas2"] = TFile("root/AlphaSource/Pu239new_EJ200PS-1X1P_1_Default_Nofoil_FastFrame_20161210_merged.root")

    mytree["meas2"] = myfile["meas2"].Get("tree")

    c1 = TCanvas("c1","c1",800,600)

    ## FastFrame
    myhist["meas1"] = TH1D("myhist_meas1","meas1",256,-0.5,7.5)
    mytree["meas1"].Draw("area*1.e9>>myhist_meas1","","")

    myhist["meas2"] = TH1D("myhist_meas2","meas2",256,-0.5,7.5)
    mytree["meas2"].Draw("(area*1.e9+0.3152)/1.04>>myhist_meas2","","")

    #myhist["meas1"].Scale(1./myhist["meas1"].Integral())
    myhist["meas1"].SetLineColor(2)
    myhist["meas1"].Draw()

    myhist["meas1"].GetXaxis().SetTitle("Energy [V#timesns]")
##    myhist["meas1"].GetYaxis().SetTitle("Events")
    myhist["meas1"].GetYaxis().SetTitle("A.U.")
    myhist["meas1"].GetYaxis().SetRangeUser(5.e-2,2.e6)
    #myhist["meas1"].GetYaxis().SetRangeUser(5.e-7,1.e1)

    gPad.SetLogy()
    gPad.Update()
    c1.Update()

    myhist["meas2"].Scale(myhist["meas1"].Integral()/myhist["meas2"].Integral())
    #myhist["meas2"].Scale(1./myhist["meas2"].Integral())
    myhist["meas2"].SetLineColor(4)
    myhist["meas2"].SetLineStyle(1)
    myhist["meas2"].Draw("same")


    leg = TLegend(0.58,0.7,0.89,0.92)
    leg.SetFillColor(kWhite)
    leg.SetLineColor(kWhite)

    leg.SetHeader("EJ200PS-1X1P-1")
    leg.AddEntry(myhist["meas1"],"9/7","l")
    leg.AddEntry(myhist["meas2"],"12/10 (corr.)","l")

    leg.Draw()

    today = datetime.date.today()
    fTag = today.strftime("%Y%m%d")
    #fTag="20161205"
    fnameTag = "%s_p%s"%(options.outtag,fTag)

    c1.SaveAs("Results/20161212/Alpha_eng_%s.png"%fnameTag)
    c1.SaveAs("Results/20161212/Alpha_eng_%s.pdf"%fnameTag)
    c1.SaveAs("Results/20161212/Alpha_eng_%s.root"%fnameTag)


    mean1 = myhist["meas1"].GetMean()
    mean2 = myhist["meas2"].GetMean()

    RMS1 = myhist["meas1"].GetRMS()
    RMS2 = myhist["meas2"].GetRMS()

    print "(Mean, RMS) Meas1 = (%5.2f,%5.2f)"%(mean1,RMS1)
    print "(Mean, RMS) Meas2 = (%5.2f,%5.2f)"%(mean2,RMS2)

##    print "\nRudimentary statistical checks for the two measurements:"
##    ks = myhist["meas1"].KolmogorovTest(myhist["meas2"],"D")
##    print "Compatibility [KS test value] = %6.5f"%ks

##    chi2t = myhist["meas1"].Chi2Test(myhist["meas2"],"P UU NORM")
##    print "Compatibility [chi2 test value] = %6.5f"%chi2t
