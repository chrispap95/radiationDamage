import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.dates as mdates
import numpy as np
import datetime

measDate = np.array([
    '2020/09/17','2020/09/17','2020/09/18','2020/09/18','2020/09/17','2020/09/19','2020/09/19',
    '2020/09/16','2020/09/16','2020/09/21','2020/09/19','2020/09/21','2020/09/18','2020/09/18',
    '2020/09/16','2020/09/20','2020/09/21','2020/09/16','2020/09/21','2020/09/17','2020/09/19',
    '2020/09/18','2020/09/17','2020/09/19','2020/09/17','2020/09/18','2020/09/16','2020/09/21',
    '2020/09/21','2020/09/20','2020/09/20','2020/09/21','2020/09/20','2020/09/16','2020/09/20',
    '2020/09/21','2020/09/20','2020/09/17','2020/09/16','2020/09/19','2020/09/19','2020/09/18',
    '2020/09/17','2020/09/17','2020/09/21','2020/09/16','2020/09/20','2020/09/17','2020/09/18',
    '2020/09/17','2020/09/19','2020/09/19','2020/09/19','2020/09/18','2020/09/16','2020/09/17',
    '2020/09/21','2020/09/20','2020/09/21','2020/09/17','2020/09/18','2020/09/17','2020/09/22',
    '2020/09/22','2020/09/16','2020/09/22','2020/09/22','2020/09/22','2020/09/23','2020/09/23',
    '2020/09/23','2020/09/22','2020/09/23','2020/09/22','2020/09/22','2020/09/23','2020/09/23',
    '2020/09/22','2020/09/23','2020/09/22','2020/09/22','2020/09/23','2020/09/23','2020/09/22',
    '2020/09/23','2020/09/22','2020/09/23','2020/09/17','2020/09/21','2020/09/18','2020/09/16',
    '2020/09/20','2020/09/22','2020/09/22','2020/09/24','2020/09/24','2020/09/25','2020/09/25',
    '2020/09/23','2020/09/22','2020/09/24','2020/09/25','2020/09/25','2020/09/25','2020/09/23',
    '2020/09/22','2020/09/24','2020/09/25','2020/09/25','2020/09/25','2020/09/23','2020/09/23',
    '2020/09/21','2020/09/20','2020/09/17','2020/09/19','2020/09/16','2020/09/17','2020/09/21',
    '2020/09/21','2020/09/17'
])
measDate_index = (measDate == '2020/09/16')*1 + (measDate == '2020/09/17')*2 + (measDate == '2020/09/18')*3 + (measDate == '2020/09/19')*4 +(measDate == '2020/09/20')*5 + (measDate == '2020/09/21')*6 +(measDate == '2020/09/22')*7 + (measDate == '2020/09/23')*8 +(measDate == '2020/09/24')*9 + (measDate == '2020/09/25')*10

oprtr = np.array([
    'Tim E','Chris P','Chris P','Chris P','Chris P','Yihui L','Chris P',
    'Chris P','Tim E','Chris P','Chris P','Yihui L','Yihui L','Yihui L',
    'Chris P','Yihui L','Tim E','Tim E','Tim E','Yihui L','Yihui L','Tim E',
    'Chris P','Yihui L','Chris P','Tim E','Chris P','Chris P','Yihui L',
    'Chris P','Chris P','Tim E','Chris P','Chris P','Yihui L','Tim E','Chris P',
    'Tim E','Chris P','Yihui L','Yihui L','Yihui L','Tim E','Yihui L','Tim E',
    'Chris P','Yihui L','Yihui L','Yihui L','Tim E','Chris P','Yihui L',
    'Chris P','Yihui L','Tim E','Yihui L','Yihui L','Chris P','Chris P','Tim E',
    'Tim E','Chris P','Yihui L','Yihui L','Tim E','Yihui L','Yihui L','Chris P',
    'Tim E','Tim E','Chris P','Tim E','Chris P','Chris P','Tim E','Tim E',
    'Chris P','Tim E','Chris P','Chris P','Tim E','Tim E','Chris P','Tim E',
    'Chris P','Tim E','Chris P','Chris P','Chris P','Yihui L','Tim E','Yihui L',
    'Tim E','Chris P','Chris P','Chris P','Tim E','Tim E','Tim E','Chris P',
    'Chris P','Tim E','Tim E','Tim E','Tim E','Chris P','Chris P','Tim E',
    'Tim E','Tim E','Tim E','Tim E','Chris P','Yihui L','Chris P','Yihui L',
    'Tim E','Tim E','Chris P','Yihui L','Chris P'
])
oprtr_index = (oprtr == 'Chris P')*1 + (oprtr == 'Tim E')*2 + (oprtr == 'Yihui L')*3

pedStart = np.array([
    -0.187,-0.18202,-0.1839,-0.1839,-0.18202,-0.175388,-0.17156,-0.17897,
    -0.17871,-0.16163,-0.17156,-0.172524,-0.17549,-0.17549,-0.17897,-0.172924,
    -0.157,-0.17871,-0.157,-0.178794,-0.175388,-0.173,-0.18202,-0.175388,
    -0.18202,-0.173,-0.17897,-0.16163,-0.172524,-0.16193,-0.16193,-0.157,
    -0.16193,-0.17897,-0.172924,-0.157,-0.16193,-0.187,-0.17897,-0.175388,
    -0.175388,-0.17549,-0.187,-0.178794,-0.157,-0.17897,-0.172924,-0.178794,
    -0.17549,-0.187,-0.17156,-0.175388,-0.17156,-0.17549,-0.17871,-0.178794,
    -0.172524,-0.16193,-0.16163,-0.187,-0.173,-0.18202,-0.172295,-0.172295,
    -0.17871,-0.172295,-0.172295,-0.17369,-0.167,-0.167,-0.17351,-0.156,
    -0.17351,-0.17369,-0.156,-0.167,-0.17351,-0.156,-0.17351,-0.17369,-0.156,
    -0.167,-0.17351,-0.156,-0.17351,-0.156,-0.17351,-0.18202,-0.16163,-0.17549,
    -0.17871,-0.172924,-0.156,-0.17369,-0.17809,-0.17809,-0.182,-0.182,-0.167,
    -0.17369,-0.17809,-0.182,-0.182,-0.182,-0.167,-0.17369,-0.17809,-0.182,
    -0.182,-0.182,-0.167,-0.167,-0.16163,-0.172924,-0.18202,-0.175388,-0.17871,
    -0.187,-0.16163,-0.172524,-0.18202
])
pedEnd = np.array([
    -0.191,-0.18069,-0.17555,-0.17555,-0.18069,-0.167565,-0.17448,-0.17845,
    -0.18055,-0.17499,-0.17448,-0.155252,-0.179931,-0.179931,-0.17845,-0.173963,
    -0.164,-0.18055,-0.164,-0.183369,-0.167565,-0.185,-0.18069,-0.167565,
    -0.18069,-0.185,-0.17845,-0.17499,-0.155252,-0.17168,-0.17168,-0.164,
    -0.17168,-0.17845,-0.173963,-0.164,-0.17168,-0.191,-0.17845,-0.167565,
    -0.167565,-0.179931,-0.191,-0.183369,-0.164,-0.17845,-0.173963,-0.183369,
    -0.179931,-0.191,-0.17448,-0.167565,-0.17448,-0.179931,-0.18055,-0.183369,
    -0.155252,-0.17168,-0.17499,-0.191,-0.185,-0.18069,-0.152516,-0.152516,
    -0.18055,-0.152516,-0.152516,-0.16683,-0.167,-0.167,-0.16975,-0.171,
    -0.16975,-0.16683,-0.171,-0.167,-0.16975,-0.171,-0.16975,-0.16683,-0.171,
    -0.167,-0.16975,-0.171,-0.16975,-0.171,-0.16975,-0.18069,-0.17499,-0.179931,
    -0.18055,-0.173963,-0.171,-0.16683,-0.16553,-0.16553,-0.172,-0.172,-0.167,
    -0.16683,-0.16553,-0.172,-0.172,-0.172,-0.167,-0.16683,-0.16553,-0.172,
    -0.172,-0.172,-0.167,-0.167,-0.17499,-0.173963,-0.18069,-0.167565,-0.18055,
    -0.191,-0.17499,-0.155252,-0.18069
])

refStartA = np.array([
    5.428,5.42009,5.447,5.447,5.42009,5.422318,5.45107,5.4317,5.48326,5.45002,
    5.45107,5.434936,5.42069,5.42069,5.4317,5.432582,5.454,5.48326,5.454,
    5.446002,5.422318,5.452,5.42009,5.422318,5.42009,5.452,5.4317,5.45002,
    5.434936,5.44282,5.44282,5.454,5.44282,5.4317,5.432582,5.454,5.44282,5.428,
    5.4317,5.422318,5.422318,5.42069,5.428,5.446002,5.454,5.4317,5.432582,
    5.446002,5.42069,5.428,5.45107,5.422318,5.45107,5.42069,5.48326,5.446002,
    5.434936,5.44282,5.45002,5.428,5.452,5.42009,5.442075,5.442075,5.48326,
    5.442075,5.442075,5.4556,5.426,5.426,5.41135,5.453,5.41135,5.4556,5.453,
    5.426,5.41135,5.453,5.41135,5.4556,5.453,5.426,5.41135,5.453,5.41135,5.453,
    5.41135,5.42009,5.45002,5.42069,5.48326,5.432582,5.453,5.4556,5.44819,
    5.44819,5.444,5.444,5.426,5.4556,5.44819,5.444,5.444,5.444,5.426,5.4556,
    5.44819,5.444,5.444,5.444,5.426,5.426,5.45002,5.432582,5.42009,5.422318,
    5.48326,5.428,5.45002,5.434936,5.42009
])
refEndA = np.array([
    5.423,5.44431,5.43507,5.43507,5.44431,5.466334,5.44891,5.46025,5.45604,
    5.47642,5.44891,5.459404,5.444035,5.444035,5.46025,5.434047,5.481,5.45604,
    5.481,5.427571,5.466334,5.417,5.44431,5.466334,5.44431,5.417,5.46025,
    5.47642,5.459404,5.45599,5.45599,5.481,5.45599,5.46025,5.434047,5.481,
    5.45599,5.423,5.46025,5.466334,5.466334,5.444035,5.423,5.427571,5.481,
    5.46025,5.434047,5.427571,5.444035,5.423,5.44891,5.466334,5.44891,5.444035,
    5.45604,5.427571,5.459404,5.45599,5.47642,5.423,5.417,5.44431,5.437505,
    5.437505,5.45604,5.437505,5.437505,5.46672,5.449,5.449,5.42155,5.453,
    5.42155,5.46672,5.453,5.449,5.42155,5.453,5.42155,5.46672,5.453,5.449,
    5.42155,5.453,5.42155,5.453,5.42155,5.44431,5.47642,5.444035,5.45604,
    5.434047,5.453,5.46672,5.45502,5.45502,5.458,5.458,5.449,5.46672,5.45502,
    5.458,5.458,5.458,5.449,5.46672,5.45502,5.458,5.458,5.458,5.449,5.449,
    5.47642,5.434047,5.44431,5.466334,5.45604,5.423,5.47642,5.459404,5.44431
])

oldMeasDate_PS = np.array([
    '20181115','20170216','20170612','20170124','20190207','20190117','20181115','20170216',
    '20170612','20170124','20190103','20190117','20181115','20170420','20200611','20170125',
    '20181115','20170420','20170125','20190207','20190117','20181115','20190104','20190117',
    '20181115','20170607','20200630','20200611','20200611','20190118','20170607','20170608',
    '20180223','20190118','20170607','20170608','20180223','20190118','20170607','20170608',
    '20180223','20190118'
])
oldMeasDate_PVT = np.array([
    '20170612','20170216','20181116','20170124','20190117','20190207','20170612','20170216',
    '20181116','20170124','20190103','20190117','20170420','20181116','20170125','20170420',
    '20181119','20170125','20190103','20190117','20190103','20190117','20181119','20181119',
    '20170503','20170504','20200611','20170503','20170504','20190402','20170503','20170504',
    '20190402','20170503','20170504','20190402','20191211','20190417','20191211','20190417',
    '20191211','20190417'
])
oldMeasDate_PS_converted = np.array([datetime.datetime.strptime(d,"%Y%m%d").date() for d in oldMeasDate_PS])
oldMeasDate_PVT_converted = np.array([datetime.datetime.strptime(d,"%Y%m%d").date() for d in oldMeasDate_PVT])

deltaDoverD_PS = np.array([
    -0.04,-0.05,-0.04, 0.06, 0.01, 0.04,-0.08,-0.05,-0.07,-0.07, 0.03,-0.02,
    -0.04,-0.03,-0.04,-0.04,-0.02,-0.05,-0.12,-0.03,-0.01,-0.05,-0.04,-0.04,
    -0.10, 0.19,-0.07, 0.01,-0.07,-0.05, 0.01,-0.04,-0.02,-0.01, 0.00,-0.04,
    -0.03,-0.02, 0.05,-0.07,-0.06, 0.07
])
deltaDoverD_PVT = np.array([
    -0.13,-0.16,-0.11,-0.11,-0.08,-0.07,-0.14,-0.09,-0.13,-0.14,-0.04,-0.15,
    -0.06,-0.09,-0.13,-0.16,-0.09,-0.25,-0.07,-0.11,-0.05,-0.07,-0.07,-0.10,
    -0.03,-0.13,-0.12,-0.05,-0.07,-0.14,-0.09,-0.12,-0.19,-0.13,-0.18,-0.34,
     0.11, 0.03, 0.04,-0.12, 0.13,-0.02
])

fig = plt.figure(figsize=(8,7))
ax = plt.gca()
ax.tick_params(axis='both', which='major', labelsize=12)

plotNo = 7
if plotNo == 1:
    plt.xticks(oprtr_index, oprtr)
    fig.subplots_adjust(left=0.15, right=0.95, bottom=0.09, top=0.95)
    ax.set_ylabel('pedestal [V$\\times$ns]', fontsize=18)
    ax.scatter(oprtr_index, pedStart, label='start')
    ax.scatter(oprtr_index, pedEnd, label='end')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/pedestal_vs_operator.pdf")
elif plotNo == 2:
    plt.xticks(measDate_index, measDate, rotation=30)
    fig.subplots_adjust(left=0.15, right=0.95, bottom=0.13, top=0.95)
    ax.set_xlabel('', fontsize=18)
    ax.set_ylabel('pedestal [V$\\times$ns]', fontsize=18)
    ax.scatter(measDate_index, pedStart, label='start')
    ax.scatter(measDate_index, pedEnd, label='end')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/pedestal_vs_date.pdf")
elif plotNo == 3:
    plt.xticks(oprtr_index, oprtr)
    fig.subplots_adjust(left=0.15, right=0.95, bottom=0.09, top=0.95)
    ax.set_ylabel('reference Face A (ped. sub.) [V$\\times$ns]', fontsize=18)
    ax.scatter(oprtr_index, refStartA-pedStart, label='start')
    ax.scatter(oprtr_index, refEndA-pedStart, label='end')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/reference_vs_operator.pdf")
elif plotNo == 4:
    plt.xticks(measDate_index, measDate, rotation=30)
    fig.subplots_adjust(left=0.15, right=0.95, bottom=0.13, top=0.95)
    ax.set_xlabel('', fontsize=18)
    ax.set_ylabel('reference Face A (ped. sub.) [V$\\times$ns]', fontsize=18)
    ax.scatter(measDate_index, refStartA-pedStart, label='start')
    ax.scatter(measDate_index, refEndA-pedStart, label='end')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/reference_vs_date.pdf")
elif plotNo == 5:
    fig.subplots_adjust(left=0.1, right=0.95, bottom=0.1, top=0.95)
    ax.set_xlabel('$\Delta$D/D', fontsize=18)
    ax.set_ylabel('', fontsize=18)
    ax.hist(deltaDoverD_PS, histtype='step', label='PS')
    ax.hist(deltaDoverD_PVT, histtype='step', label='PVT')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/deltaDoverD_ps_pvt.pdf")
elif plotNo == 6:
    fig.subplots_adjust(left=0.1, right=0.95, bottom=0.1, top=0.95)
    ax.set_xlabel('$\Delta$D/D', fontsize=18)
    ax.set_ylabel('', fontsize=18)
    ax.hist(np.concatenate((deltaDoverD_PS, deltaDoverD_PVT)), histtype='step')
    fig.savefig("paperPlots/collectivePlots/deltaDoverD.pdf")
elif plotNo == 7:
    plt.xticks(rotation=30)
    fig.subplots_adjust(left=0.15, right=0.95, bottom=0.15, top=0.95)
    ax.set_xlabel('old measurement date', fontsize=18)
    ax.set_ylabel('$\Delta$D/D', fontsize=18)
    formatter = mdates.DateFormatter("%Y/%m/%d")
    ax.xaxis.set_major_formatter(formatter)
    locator = mdates.MonthLocator(interval=6)
    ax.xaxis.set_major_locator(locator)
    ax.scatter(oldMeasDate_PS_converted, deltaDoverD_PS, label='PS')
    ax.scatter(oldMeasDate_PVT_converted, deltaDoverD_PVT, label='PVT')
    ax.legend(fontsize=18)
    fig.savefig("paperPlots/collectivePlots/deltaDoverD_vs_oldMeasDate.pdf")
plt.show()
